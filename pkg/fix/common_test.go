package fix

import (
	"bytes"
	"testing"

	"github.com/KyberNetwork/deribit-api/pkg/models"
	"github.com/quickfixgo/enum"
	"github.com/quickfixgo/quickfix"
	"github.com/quickfixgo/tag"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestGenerateRandomBytes(t *testing.T) {
	tests := []int{3, 10, 60, 1500}
	for _, test := range tests {
		bytesA, err := generateRandomBytes(test)
		assert.NoError(t, err)
		bytesB, err := generateRandomBytes(test)
		assert.NoError(t, err)
		assert.Equal(t, len(bytesA), test)
		assert.NotEqual(t, bytesA, make([]byte, test)) // 0x0 bytes
		assert.NotEqual(t, bytesA, bytesB)
	}
}

func TestDecodeOrderStatus(t *testing.T) {
	tests := []struct {
		status         enum.OrdStatus
		expectedOutput string
	}{
		{
			enum.OrdStatus_NEW,
			"open",
		},
		{
			enum.OrdStatus_PARTIALLY_FILLED,
			"open",
		},
		{
			enum.OrdStatus_FILLED,
			"filled",
		},
		{
			enum.OrdStatus_CANCELED,
			"cancelled",
		},
		{
			enum.OrdStatus_REJECTED,
			"rejected",
		},
		{
			enum.OrdStatus_DONE_FOR_DAY,
			"",
		},
	}

	for _, test := range tests {
		ordStatus := decodeOrderStatus(test.status)
		assert.Equal(t, test.expectedOutput, ordStatus)
	}
}

func TestDecodeOrderSide(t *testing.T) {
	tests := []struct {
		side           enum.Side
		expectedOutput string
	}{
		{
			enum.Side_BUY,
			"buy",
		},
		{
			enum.Side_SELL,
			"sell",
		},
		{
			enum.Side_BUY_MINUS,
			"",
		},
	}

	for _, test := range tests {
		side := decodeOrderSide(test.side)
		assert.Equal(t, test.expectedOutput, side)
	}
}

func TestDecodeOrderType(t *testing.T) {
	tests := []struct {
		ordType        enum.OrdType
		expectedOutput string
	}{
		{
			enum.OrdType_MARKET,
			"market",
		},
		{
			enum.OrdType_LIMIT,
			"limit",
		},
		{
			enum.OrdType_STOP_LIMIT,
			"stop_limit",
		},
		{
			orderTypeStopMarket,
			"stop_market",
		},
		{
			enum.OrdType_PREVIOUSLY_QUOTED,
			"",
		},
		{
			enum.OrdType_PREVIOUSLY_INDICATED,
			"",
		},
	}

	for _, test := range tests {
		ordType := decodeOrderType(test.ordType)
		assert.Equal(t, test.expectedOutput, ordType)
	}
}

func TestDecodeTimeInForce(t *testing.T) {
	tests := []struct {
		tif            enum.TimeInForce
		expectedOutput string
	}{
		{
			enum.TimeInForce_DAY,
			"good_til_day",
		},
		{
			enum.TimeInForce_GOOD_TILL_CANCEL,
			"good_til_cancelled",
		},
		{
			enum.TimeInForce_IMMEDIATE_OR_CANCEL,
			"immediate_or_cancel",
		},
		{
			enum.TimeInForce_FILL_OR_KILL,
			"fill_or_kill",
		},
		{
			enum.TimeInForce_GOOD_TILL_CROSSING,
			"",
		},
		{
			enum.TimeInForce_GOOD_TILL_DATE,
			"",
		},
	}

	for _, test := range tests {
		tif := decodeTimeInForce(test.tif)
		assert.Equal(t, test.expectedOutput, tif)
	}
}

// nolint:funlen,lll
func TestDecodeExecutionReport(t *testing.T) {
	tests := []struct {
		msg            string
		expectedOutput models.Order
		isError        bool
	}{
		{
			"8=FIX.4.4\u00019=495\u000135=8\u000149=DERIBITSERVER\u000156=OPTION_TRADING_TEST\u000134=7534\u000118=E6\u000152=20220912-11:12:19.623\u0001527=14230452591\u000137=14230452591\u000111=14230452591\u000141=ff39b93f-4e8c-4187-8930-6eac35bdb2e9\u0001150=I\u000139=2\u000154=1\u000160=20220912-11:12:19.623\u000112=0.00300000\u0001151=0.0\u000114=10.0\u000138=10.0\u000140=2\u000144=0.0865\u0001103=0\u000158=success\u0001207=DERIBITSERVER\u000155=BTC-30JUN23-14000-P\u0001854=1\u0001231=1.0\u00016=0.086500\u0001210=10.0\u0001100010=BTC-30JUN23-14000-P_buy_0.0865_10_QbAlfrTXhEpiJvs\u000132=10.0\u000131=0.0865\u00011362=1\u00011363=BTC-30JUN23-14000-P#83\u00011364=0.0865\u00011365=10.0\u00011443=2\u000110=071\u0001",
			models.Order{
				OrderState:          "filled",
				MaxShow:             10,
				API:                 true,
				Amount:              10,
				Web:                 false,
				InstrumentName:      "BTC-30JUN23-14000-P",
				Price:               0.0865,
				LastUpdateTimestamp: 1662981139623,
				PostOnly:            true,
				FilledAmount:        10,
				AveragePrice:        0.0865,
				OrderID:             "14230452591",
				ReduceOnly:          true,
				Commission:          0.003,
				Label:               "BTC-30JUN23-14000-P_buy_0.0865_10_QbAlfrTXhEpiJvs",
				CreationTimestamp:   1662981139623,
				Direction:           "buy",
				OrderType:           "limit",
			},
			false,
		},
		{
			"8=FIX.4.4\u00019=484\u000135=8\u000149=DERIBITSERVER\u000156=OPTION_TRADING_TEST\u000134=7534\u000152=20220912-11:12:19.623\u0001527=14230452591\u000137=14230452591\u000111=14230452591\u000141=ff39b93f-4e8c-4187-8930-6eac35bdb2e9\u0001150=I\u000154=1\u000160=20220912-11:12:19.623\u000112=0.00300000\u0001151=0.0\u000114=10.0\u000138=10.0\u000140=2\u000144=0.0865\u0001103=0\u000158=success\u0001207=DERIBITSERVER\u000155=BTC-30JUN23-14000-P\u0001854=1\u0001231=1.0\u00016=0.086500\u0001210=10.0\u0001100010=BTC-30JUN23-14000-P_buy_0.0865_10_QbAlfrTXhEpiJvs\u000132=10.0\u000131=0.0865\u00011362=1\u00011363=BTC-30JUN23-14000-P#83\u00011364=0.0865\u00011365=10.0\u00011443=2\u000110=071\u0001",
			models.Order{},
			true, // Conditionally Required Field Missing (39)
		},
		{
			"8=FIX.4.4\u00019=489\u000135=8\u000149=DERIBITSERVER\u000156=OPTION_TRADING_TEST\u000134=7534\u000152=20220912-11:12:19.623\u0001527=14230452591\u000137=14230452591\u000111=14230452591\u000141=ff39b93f-4e8c-4187-8930-6eac35bdb2e9\u0001150=I\u000139=8\u000154=1\u000160=20220912-11:12:19.623\u000112=0.00300000\u0001151=0.0\u000114=10.0\u000138=10.0\u000140=2\u000144=0.0865\u0001103=0\u000158=success\u0001207=DERIBITSERVER\u000155=BTC-30JUN23-14000-P\u0001854=1\u0001231=1.0\u00016=0.086500\u0001210=10.0\u0001100010=BTC-30JUN23-14000-P_buy_0.0865_10_QbAlfrTXhEpiJvs\u000132=10.0\u000131=0.0865\u00011362=1\u00011363=BTC-30JUN23-14000-P#83\u00011364=0.0865\u00011365=10.0\u00011443=2\u000110=071\u0001",
			models.Order{},
			true, // Order Status Rejected with reason
		},
		{
			"8=FIX.4.4\u00019=478\u000135=8\u000149=DERIBITSERVER\u000156=OPTION_TRADING_TEST\u000134=7534\u000152=20220912-11:12:19.623\u0001527=14230452591\u000137=14230452591\u000111=14230452591\u000141=ff39b93f-4e8c-4187-8930-6eac35bdb2e9\u0001150=I\u000139=8\u000154=1\u000160=20220912-11:12:19.623\u000112=0.00300000\u0001151=0.0\u000114=10.0\u000138=10.0\u000140=2\u000144=0.0865\u0001103=0\u0001207=DERIBITSERVER\u000155=BTC-30JUN23-14000-P\u0001854=1\u0001231=1.0\u00016=0.086500\u0001210=10.0\u0001100010=BTC-30JUN23-14000-P_buy_0.0865_10_QbAlfrTXhEpiJvs\u000132=10.0\u000131=0.0865\u00011362=1\u00011363=BTC-30JUN23-14000-P#83\u00011364=0.0865\u00011365=10.0\u00011443=2\u000110=071\u0001",
			models.Order{},
			true, // Order Status Rejected without reason
		},
		{
			"8=FIX.4.4\u00019=466\u000135=8\u000149=DERIBITSERVER\u000156=OPTION_TRADING_TEST\u000134=7534\u000152=20220912-11:12:19.623\u0001527=14230452591\u000137=14230452591\u000111=14230452591\u000141=ff39b93f-4e8c-4187-8930-6eac35bdb2e9\u0001150=I\u000139=2\u000154=1\u000160=20220912-11:12:19.623\u000112=0.00300000\u0001151=0.0\u000114=10.0\u000138=10.0\u000140=2\u000144=0.0865\u0001103=0\u000158=success\u0001207=DERIBITSERVER\u0001854=1\u0001231=1.0\u00016=0.086500\u0001210=10.0\u0001100010=BTC-30JUN23-14000-P_buy_0.0865_10_QbAlfrTXhEpiJvs\u000132=10.0\u000131=0.0865\u00011362=1\u00011363=BTC-30JUN23-14000-P#83\u00011364=0.0865\u00011365=10.0\u00011443=2\u000110=071\u0001",
			models.Order{},
			true, // Conditionally Required Field Missing (55)
		},
		{
			"8=FIX.4.4\u00019=474\u000135=8\u000149=DERIBITSERVER\u000156=OPTION_TRADING_TEST\u000134=7534\u000152=20220912-11:12:19.623\u0001527=14230452591\u000111=14230452591\u000141=ff39b93f-4e8c-4187-8930-6eac35bdb2e9\u0001150=I\u000139=2\u000154=1\u000160=20220912-11:12:19.623\u000112=0.00300000\u0001151=0.0\u000114=10.0\u000138=10.0\u000140=2\u000144=0.0865\u0001103=0\u000158=success\u0001207=DERIBITSERVER\u000155=BTC-30JUN23-14000-P\u0001854=1\u0001231=1.0\u00016=0.086500\u0001210=10.0\u0001100010=BTC-30JUN23-14000-P_buy_0.0865_10_QbAlfrTXhEpiJvs\u000132=10.0\u000131=0.0865\u00011362=1\u00011363=BTC-30JUN23-14000-P#83\u00011364=0.0865\u00011365=10.0\u00011443=2\u000110=071\u0001",
			models.Order{},
			true, // Conditionally Required Field Missing (37)
		},
		{
			"8=FIX.4.4\u00019=484\u000135=8\u000149=DERIBITSERVER\u000156=OPTION_TRADING_TEST\u000134=7534\u000152=20220912-11:12:19.623\u0001527=14230452591\u000137=14230452591\u000111=14230452591\u000141=ff39b93f-4e8c-4187-8930-6eac35bdb2e9\u0001150=I\u000139=2\u000154=1\u000160=20220912-11:12:19.623\u000112=0.00300000\u0001151=0.0\u000114=10.0\u000138=10.0\u000144=0.0865\u0001103=0\u000158=success\u0001207=DERIBITSERVER\u000155=BTC-30JUN23-14000-P\u0001854=1\u0001231=1.0\u00016=0.086500\u0001210=10.0\u0001100010=BTC-30JUN23-14000-P_buy_0.0865_10_QbAlfrTXhEpiJvs\u000132=10.0\u000131=0.0865\u00011362=1\u00011363=BTC-30JUN23-14000-P#83\u00011364=0.0865\u00011365=10.0\u00011443=2\u000110=071\u0001",
			models.Order{},
			true, // Conditionally Required Field Missing (40)
		},
		{
			"8=FIX.4.4\u00019=484\u000135=8\u000149=DERIBITSERVER\u000156=OPTION_TRADING_TEST\u000134=7534\u000152=20220912-11:12:19.623\u0001527=14230452591\u000137=14230452591\u000111=14230452591\u000141=ff39b93f-4e8c-4187-8930-6eac35bdb2e9\u0001150=I\u000139=2\u000160=20220912-11:12:19.623\u000112=0.00300000\u0001151=0.0\u000114=10.0\u000138=10.0\u000140=2\u000144=0.0865\u0001103=0\u000158=success\u0001207=DERIBITSERVER\u000155=BTC-30JUN23-14000-P\u0001854=1\u0001231=1.0\u00016=0.086500\u0001210=10.0\u0001100010=BTC-30JUN23-14000-P_buy_0.0865_10_QbAlfrTXhEpiJvs\u000132=10.0\u000131=0.0865\u00011362=1\u00011363=BTC-30JUN23-14000-P#83\u00011364=0.0865\u00011365=10.0\u00011443=2\u000110=071\u0001",
			models.Order{},
			true, // Conditionally Required Field Missing (54)
		},
		{
			"8=FIX.4.4\u00019=481\u000135=8\u000149=DERIBITSERVER\u000156=OPTION_TRADING_TEST\u000134=7534\u000152=20220912-11:12:19.623\u0001527=14230452591\u000137=14230452591\u000111=14230452591\u000141=ff39b93f-4e8c-4187-8930-6eac35bdb2e9\u0001150=I\u000139=2\u000154=1\u000160=20220912-11:12:19.623\u000112=0.00300000\u0001151=0.0\u000114=10.0\u000140=2\u000144=0.0865\u0001103=0\u000158=success\u0001207=DERIBITSERVER\u000155=BTC-30JUN23-14000-P\u0001854=1\u0001231=1.0\u00016=0.086500\u0001210=10.0\u0001100010=BTC-30JUN23-14000-P_buy_0.0865_10_QbAlfrTXhEpiJvs\u000132=10.0\u000131=0.0865\u00011362=1\u00011363=BTC-30JUN23-14000-P#83\u00011364=0.0865\u00011365=10.0\u00011443=2\u000110=071\u0001",
			models.Order{},
			true, // Conditionally Required Field Missing (38)
		},
		{
			"8=FIX.4.4\u00019=481\u000135=8\u000149=DERIBITSERVER\u000156=OPTION_TRADING_TEST\u000134=7534\u000152=20220912-11:12:19.623\u0001527=14230452591\u000137=14230452591\u000111=14230452591\u000141=ff39b93f-4e8c-4187-8930-6eac35bdb2e9\u0001150=I\u000139=2\u000154=1\u000160=20220912-11:12:19.623\u000112=0.00300000\u0001151=0.0\u000138=10.0\u000140=2\u000144=0.0865\u0001103=0\u000158=success\u0001207=DERIBITSERVER\u000155=BTC-30JUN23-14000-P\u0001854=1\u0001231=1.0\u00016=0.086500\u0001210=10.0\u0001100010=BTC-30JUN23-14000-P_buy_0.0865_10_QbAlfrTXhEpiJvs\u000132=10.0\u000131=0.0865\u00011362=1\u00011363=BTC-30JUN23-14000-P#83\u00011364=0.0865\u00011365=10.0\u00011443=2\u000110=071\u0001",
			models.Order{},
			true, // Conditionally Required Field Missing (14)
		},
		{
			"8=FIX.4.4\u00019=479\u000135=8\u000149=DERIBITSERVER\u000156=OPTION_TRADING_TEST\u000134=7534\u000152=20220912-11:12:19.623\u0001527=14230452591\u000137=14230452591\u000111=14230452591\u000141=ff39b93f-4e8c-4187-8930-6eac35bdb2e9\u0001150=I\u000139=2\u000154=1\u000160=20220912-11:12:19.623\u000112=0.00300000\u0001151=0.0\u000114=10.0\u000138=10.0\u000140=2\u0001103=0\u000158=success\u0001207=DERIBITSERVER\u000155=BTC-30JUN23-14000-P\u0001854=1\u0001231=1.0\u00016=0.086500\u0001210=10.0\u0001100010=BTC-30JUN23-14000-P_buy_0.0865_10_QbAlfrTXhEpiJvs\u000132=10.0\u000131=0.0865\u00011362=1\u00011363=BTC-30JUN23-14000-P#83\u00011364=0.0865\u00011365=10.0\u00011443=2\u000110=071\u0001",
			models.Order{},
			true, // Conditionally Required Field Missing (44)
		},
		{
			"8=FIX.4.4\u00019=478\u000135=8\u000149=DERIBITSERVER\u000156=OPTION_TRADING_TEST\u000134=7534\u000152=20220912-11:12:19.623\u0001527=14230452591\u000137=14230452591\u000111=14230452591\u000141=ff39b93f-4e8c-4187-8930-6eac35bdb2e9\u0001150=I\u000139=2\u000154=1\u000160=20220912-11:12:19.623\u000112=0.00300000\u0001151=0.0\u000114=10.0\u000138=10.0\u000140=2\u000144=0.0865\u0001103=0\u000158=success\u0001207=DERIBITSERVER\u000155=BTC-30JUN23-14000-P\u0001854=1\u0001231=1.0\u0001210=10.0\u0001100010=BTC-30JUN23-14000-P_buy_0.0865_10_QbAlfrTXhEpiJvs\u000132=10.0\u000131=0.0865\u00011362=1\u00011363=BTC-30JUN23-14000-P#83\u00011364=0.0865\u00011365=10.0\u00011443=2\u000110=071\u0001",
			models.Order{},
			true, // Conditionally Required Field Missing (6)
		},
		{
			"8=FIX.4.4\u00019=475\u000135=8\u000149=DERIBITSERVER\u000156=OPTION_TRADING_TEST\u000134=7534\u000152=20220912-11:12:19.623\u0001527=14230452591\u000137=14230452591\u000111=14230452591\u000141=ff39b93f-4e8c-4187-8930-6eac35bdb2e9\u0001150=I\u000139=2\u000154=1\u000160=20220912-11:12:19.623\u0001151=0.0\u000114=10.0\u000138=10.0\u000140=2\u000144=0.0865\u0001103=0\u000158=success\u0001207=DERIBITSERVER\u000155=BTC-30JUN23-14000-P\u0001854=1\u0001231=1.0\u00016=0.086500\u0001210=10.0\u0001100010=BTC-30JUN23-14000-P_buy_0.0865_10_QbAlfrTXhEpiJvs\u000132=10.0\u000131=0.0865\u00011362=1\u00011363=BTC-30JUN23-14000-P#83\u00011364=0.0865\u00011365=10.0\u00011443=2\u000110=071\u0001",
			models.Order{},
			true, // Conditionally Required Field Missing (12)
		},
		{
			"8=FIX.4.4\u00019=480\u000135=8\u000149=DERIBITSERVER\u000156=OPTION_TRADING_TEST\u000134=7534\u000152=20220912-11:12:19.623\u0001527=14230452591\u000137=14230452591\u000111=14230452591\u000141=ff39b93f-4e8c-4187-8930-6eac35bdb2e9\u0001150=I\u000139=2\u000154=1\u000160=20220912-11:12:19.623\u000112=0.00300000\u0001151=0.0\u000114=10.0\u000138=10.0\u000140=2\u000144=0.0865\u0001103=0\u000158=success\u0001207=DERIBITSERVER\u000155=BTC-30JUN23-14000-P\u0001854=1\u0001231=1.0\u00016=0.086500\u0001100010=BTC-30JUN23-14000-P_buy_0.0865_10_QbAlfrTXhEpiJvs\u000132=10.0\u000131=0.0865\u00011362=1\u00011363=BTC-30JUN23-14000-P#83\u00011364=0.0865\u00011365=10.0\u00011443=2\u000110=071\u0001",
			models.Order{},
			true, // Conditionally Required Field Missing (210)
		},
		{
			"8=FIX.4.4\u00019=464\u000135=8\u000149=DERIBITSERVER\u000156=OPTION_TRADING_TEST\u000134=7534\u000152=20220912-11:12:19.623\u0001527=14230452591\u000137=14230452591\u000111=14230452591\u000141=ff39b93f-4e8c-4187-8930-6eac35bdb2e9\u0001150=I\u000139=2\u000154=1\u000112=0.00300000\u0001151=0.0\u000114=10.0\u000138=10.0\u000140=2\u000144=0.0865\u0001103=0\u000158=success\u0001207=DERIBITSERVER\u000155=BTC-30JUN23-14000-P\u0001854=1\u0001231=1.0\u00016=0.086500\u0001210=10.0\u0001100010=BTC-30JUN23-14000-P_buy_0.0865_10_QbAlfrTXhEpiJvs\u000132=10.0\u000131=0.0865\u00011362=1\u00011363=BTC-30JUN23-14000-P#83\u00011364=0.0865\u00011365=10.0\u00011443=2\u000110=071\u0001",
			models.Order{},
			true, // Conditionally Required Field Missing (60)
		},
		{
			"8=FIX.4.4\u00019=432\u000135=8\u000149=DERIBITSERVER\u000156=OPTION_TRADING_TEST\u000134=7534\u000152=20220912-11:12:19.623\u0001527=14230452591\u000137=14230452591\u000111=14230452591\u000141=ff39b93f-4e8c-4187-8930-6eac35bdb2e9\u0001150=I\u000139=2\u000154=1\u000160=20220912-11:12:19.623\u000112=0.00300000\u0001151=0.0\u000114=10.0\u000138=10.0\u000140=2\u000144=0.0865\u0001103=0\u000158=success\u0001207=DERIBITSERVER\u000155=BTC-30JUN23-14000-P\u0001854=1\u0001231=1.0\u00016=0.086500\u0001210=10.0\u000132=10.0\u000131=0.0865\u00011362=1\u00011363=BTC-30JUN23-14000-P#83\u00011364=0.0865\u00011365=10.0\u00011443=2\u000110=071\u0001",
			models.Order{},
			true, // Conditionally Required Field Missing (label)
		},
	}

	for _, test := range tests {
		bufferData := bytes.NewBufferString(test.msg)

		msg := quickfix.NewMessage()
		err := quickfix.ParseMessage(msg, bufferData)
		require.NoError(t, err)

		order, err := decodeExecutionReport(msg)

		if test.isError {
			assert.Error(t, err)
		} else {
			assert.NoError(t, err)
		}

		if err == nil {
			assert.Equal(t, order, test.expectedOutput)
		}
	}
}

// nolint:funlen
func TestGetReqIDTagFromMsgType(t *testing.T) {
	tests := []struct {
		msgType        enum.MsgType
		expectedOutput quickfix.Tag
		expectedError  error
	}{
		{
			enum.MsgType_EXECUTION_REPORT,
			tag.OrigClOrdID, nil,
		},
		{
			enum.MsgType_ORDER_CANCEL_REJECT,
			tag.ClOrdID, nil,
		},

		{
			enum.MsgType_POSITION_REPORT,
			tag.PosReqID, nil,
		},

		{
			enum.MsgType_USER_RESPONSE,
			tag.UserRequestID, nil,
		},

		{
			enum.MsgType_MARKET_DATA_REQUEST,
			tag.MDReqID, nil,
		},
		{
			enum.MsgType_MARKET_DATA_SNAPSHOT_FULL_REFRESH,
			tag.MDReqID, nil,
		},
		{
			enum.MsgType_MARKET_DATA_INCREMENTAL_REFRESH,
			tag.MDReqID, nil,
		},
		{
			enum.MsgType_MARKET_DATA_REQUEST_REJECT,
			tag.MDReqID, nil,
		},

		{
			enum.MsgType_SECURITY_STATUS,
			tag.SecurityStatusReqID, nil,
		},

		{
			enum.MsgType_ORDER_MASS_CANCEL_REPORT,
			tag.OrderID, nil,
		},

		{
			enum.MsgType_SECURITY_LIST,
			tag.SecurityReqID, nil,
		},
		{
			enum.MsgType_HEARTBEAT,
			0, ErrInvalidRequestIDTag,
		},
		{
			enum.MsgType_TEST_REQUEST,
			0, ErrInvalidRequestIDTag,
		},
	}

	for _, test := range tests {
		reqIDTag, err := getReqIDTagFromMsgType(test.msgType)
		assert.Equal(t, test.expectedOutput, reqIDTag)
		assert.ErrorIs(t, test.expectedError, err)
	}
}
