package sbe

import (
	"bytes"
	"io"
	"math"
	"reflect"
	"testing"

	"github.com/KyberNetwork/deribit-api/pkg/common"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestDecodeTicker(t *testing.T) {
	tests := []struct {
		event          []byte
		expectedOutput Ticker
		expectedError  error
	}{
		// some successful cases
		{
			[]byte{
				0x85, 0x00, 0xeb, 0x03, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7a, 0x3c, 0x03, 0x00,
				0x01, 0xc7, 0x59, 0xe5, 0x15, 0x83, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f,
				0x40, 0x60, 0xe5, 0xd0, 0x22, 0xdb, 0x59, 0x39, 0x40, 0x5e, 0xba, 0x49, 0x0c, 0x02, 0xfb, 0x3a,
				0x40, 0xa8, 0xc6, 0x4b, 0x37, 0x89, 0xa1, 0x25, 0x40, 0x1f, 0x85, 0xeb, 0x51, 0xb8, 0x67, 0x97,
				0x40, 0x4e, 0x62, 0x10, 0x58, 0x39, 0x24, 0x3a, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
				0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x85, 0xeb, 0x51, 0xb8, 0x67, 0x97,
				0x40, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3d, 0x47, 0xe4, 0xbb, 0x94, 0x6e, 0x37,
				0x40,
			},
			Ticker{
				InstrumentId:           212090,
				InstrumentState:        InstrumentState.Open,
				TimestampMs:            1662519695815,
				OpenInterest:           31,
				MinSellPrice:           25.351,
				MaxBuyPrice:            26.9805,
				LastPrice:              10.8155,
				IndexPrice:             1497.93,
				MarkPrice:              26.1415,
				BestBidPrice:           0,
				BestBidAmount:          0,
				BestAskPrice:           0,
				BestAskAmount:          0,
				CurrentFunding:         math.NaN(),
				Funding8h:              math.NaN(),
				EstimatedDeliveryPrice: 1497.93,
				DeliveryPrice:          math.NaN(),
				SettlementPrice:        23.431957,
			},
			nil,
		},
		{
			[]byte{
				0x85, 0x00, 0xeb, 0x03, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x38, 0x03, 0x00,
				0x01, 0x77, 0xd6, 0xff, 0x15, 0x83, 0x01, 0x00, 0x00, 0x33, 0x33, 0x33, 0x33, 0x33, 0x73, 0x41,
				0x40, 0x75, 0x93, 0x18, 0x04, 0x56, 0x0e, 0xcd, 0x3f, 0xc1, 0xca, 0xa1, 0x45, 0xb6, 0xf3, 0xd5,
				0x3f, 0x93, 0x18, 0x04, 0x56, 0x0e, 0x2d, 0xd2, 0x3f, 0x5c, 0x8f, 0xc2, 0xf5, 0xb8, 0x42, 0xd2,
				0x40, 0xb2, 0x2e, 0x6e, 0xa3, 0x01, 0xbc, 0xd1, 0x3f, 0x1d, 0x5a, 0x64, 0x3b, 0xdf, 0x4f, 0xd1,
				0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x40, 0x12, 0x83, 0xc0, 0xca, 0xa1, 0x45, 0xd2,
				0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x40, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
				0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x5c, 0x8f, 0xc2, 0xf5, 0xb8, 0x42, 0xd2,
				0x40, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xac, 0x64, 0x11, 0xd4, 0x3a, 0xbb, 0xd3,
				0x3f, 0x1d,
			},
			Ticker{
				InstrumentId:           211013,
				InstrumentState:        InstrumentState.Open,
				TimestampMs:            1662521431671,
				OpenInterest:           34.9,
				MinSellPrice:           0.227,
				MaxBuyPrice:            0.343,
				LastPrice:              0.284,
				IndexPrice:             18698.89,
				MarkPrice:              0.2771,
				BestBidPrice:           0.2705,
				BestBidAmount:          26,
				BestAskPrice:           0.2855,
				BestAskAmount:          26,
				CurrentFunding:         math.NaN(),
				Funding8h:              math.NaN(),
				EstimatedDeliveryPrice: 18698.89,
				DeliveryPrice:          math.NaN(),
				SettlementPrice:        0.3083026,
			},
			nil,
		},
		// some decode error cases
		{
			[]byte{
				0x85, 0x00, 0xeb, 0x03, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
			Ticker{},
			io.EOF, // instrumentId
		},
		{
			[]byte{
				0x85, 0x00, 0xeb, 0x03, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7a, 0x3c, 0x03, 0x00,
			},
			Ticker{},
			io.EOF, // instrumentState
		},
		{
			[]byte{
				0x85, 0x00, 0xeb, 0x03, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7a, 0x3c, 0x03, 0x00,
				0x01,
			},
			Ticker{},
			io.EOF, // timestamp
		},
		{
			[]byte{
				0x85, 0x00, 0xeb, 0x03, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7a, 0x3c, 0x03, 0x00,
				0x01, 0xc7, 0x59, 0xe5, 0x15, 0x83, 0x01, 0x00, 0x00,
			},
			Ticker{},
			io.EOF, // openInterest
		},
		{
			[]byte{
				0x85, 0x00, 0xeb, 0x03, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7a, 0x3c, 0x03, 0x00,
				0x01, 0xc7, 0x59, 0xe5, 0x15, 0x83, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f,
				0x40,
			},
			Ticker{},
			io.EOF, // minSellPrice
		},
		{
			[]byte{
				0x85, 0x00, 0xeb, 0x03, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7a, 0x3c, 0x03, 0x00,
				0x01, 0xc7, 0x59, 0xe5, 0x15, 0x83, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f,
				0x40, 0x60, 0xe5, 0xd0, 0x22, 0xdb, 0x59, 0x39, 0x40,
			},
			Ticker{},
			io.EOF, // maxBuyPrice
		},
		{
			[]byte{
				0x85, 0x00, 0xeb, 0x03, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7a, 0x3c, 0x03, 0x00,
				0x01, 0xc7, 0x59, 0xe5, 0x15, 0x83, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f,
				0x40, 0x60, 0xe5, 0xd0, 0x22, 0xdb, 0x59, 0x39, 0x40, 0x5e, 0xba, 0x49, 0x0c, 0x02, 0xfb, 0x3a,
				0x40,
			},
			Ticker{},
			io.EOF, // lastPrice
		},
		{
			[]byte{
				0x85, 0x00, 0xeb, 0x03, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7a, 0x3c, 0x03, 0x00,
				0x01, 0xc7, 0x59, 0xe5, 0x15, 0x83, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f,
				0x40, 0x60, 0xe5, 0xd0, 0x22, 0xdb, 0x59, 0x39, 0x40, 0x5e, 0xba, 0x49, 0x0c, 0x02, 0xfb, 0x3a,
				0x40, 0xa8, 0xc6, 0x4b, 0x37, 0x89, 0xa1, 0x25, 0x40,
			},
			Ticker{},
			io.EOF, // indexPrice
		},
		{
			[]byte{
				0x85, 0x00, 0xeb, 0x03, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7a, 0x3c, 0x03, 0x00,
				0x01, 0xc7, 0x59, 0xe5, 0x15, 0x83, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f,
				0x40, 0x60, 0xe5, 0xd0, 0x22, 0xdb, 0x59, 0x39, 0x40, 0x5e, 0xba, 0x49, 0x0c, 0x02, 0xfb, 0x3a,
				0x40, 0xa8, 0xc6, 0x4b, 0x37, 0x89, 0xa1, 0x25, 0x40, 0x1f, 0x85, 0xeb, 0x51, 0xb8, 0x67, 0x97,
				0x40,
			},
			Ticker{},
			io.EOF, // markPrice
		},
		{
			[]byte{
				0x85, 0x00, 0xeb, 0x03, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7a, 0x3c, 0x03, 0x00,
				0x01, 0xc7, 0x59, 0xe5, 0x15, 0x83, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f,
				0x40, 0x60, 0xe5, 0xd0, 0x22, 0xdb, 0x59, 0x39, 0x40, 0x5e, 0xba, 0x49, 0x0c, 0x02, 0xfb, 0x3a,
				0x40, 0xa8, 0xc6, 0x4b, 0x37, 0x89, 0xa1, 0x25, 0x40, 0x1f, 0x85, 0xeb, 0x51, 0xb8, 0x67, 0x97,
				0x40, 0x4e, 0x62, 0x10, 0x58, 0x39, 0x24, 0x3a, 0x40,
			},
			Ticker{},
			io.EOF, // bestBidPrice
		},
		{
			[]byte{
				0x85, 0x00, 0xeb, 0x03, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7a, 0x3c, 0x03, 0x00,
				0x01, 0xc7, 0x59, 0xe5, 0x15, 0x83, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f,
				0x40, 0x60, 0xe5, 0xd0, 0x22, 0xdb, 0x59, 0x39, 0x40, 0x5e, 0xba, 0x49, 0x0c, 0x02, 0xfb, 0x3a,
				0x40, 0xa8, 0xc6, 0x4b, 0x37, 0x89, 0xa1, 0x25, 0x40, 0x1f, 0x85, 0xeb, 0x51, 0xb8, 0x67, 0x97,
				0x40, 0x4e, 0x62, 0x10, 0x58, 0x39, 0x24, 0x3a, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00,
			},
			Ticker{},
			io.EOF, // bestBidAmount
		},
		{
			[]byte{
				0x85, 0x00, 0xeb, 0x03, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7a, 0x3c, 0x03, 0x00,
				0x01, 0xc7, 0x59, 0xe5, 0x15, 0x83, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f,
				0x40, 0x60, 0xe5, 0xd0, 0x22, 0xdb, 0x59, 0x39, 0x40, 0x5e, 0xba, 0x49, 0x0c, 0x02, 0xfb, 0x3a,
				0x40, 0xa8, 0xc6, 0x4b, 0x37, 0x89, 0xa1, 0x25, 0x40, 0x1f, 0x85, 0xeb, 0x51, 0xb8, 0x67, 0x97,
				0x40, 0x4e, 0x62, 0x10, 0x58, 0x39, 0x24, 0x3a, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
			Ticker{},
			io.EOF, // bestAskPrice
		},
		{
			[]byte{
				0x85, 0x00, 0xeb, 0x03, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7a, 0x3c, 0x03, 0x00,
				0x01, 0xc7, 0x59, 0xe5, 0x15, 0x83, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f,
				0x40, 0x60, 0xe5, 0xd0, 0x22, 0xdb, 0x59, 0x39, 0x40, 0x5e, 0xba, 0x49, 0x0c, 0x02, 0xfb, 0x3a,
				0x40, 0xa8, 0xc6, 0x4b, 0x37, 0x89, 0xa1, 0x25, 0x40, 0x1f, 0x85, 0xeb, 0x51, 0xb8, 0x67, 0x97,
				0x40, 0x4e, 0x62, 0x10, 0x58, 0x39, 0x24, 0x3a, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00,
			},
			Ticker{},
			io.EOF, // bestAskAmount
		},
		{
			[]byte{
				0x85, 0x00, 0xeb, 0x03, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7a, 0x3c, 0x03, 0x00,
				0x01, 0xc7, 0x59, 0xe5, 0x15, 0x83, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f,
				0x40, 0x60, 0xe5, 0xd0, 0x22, 0xdb, 0x59, 0x39, 0x40, 0x5e, 0xba, 0x49, 0x0c, 0x02, 0xfb, 0x3a,
				0x40, 0xa8, 0xc6, 0x4b, 0x37, 0x89, 0xa1, 0x25, 0x40, 0x1f, 0x85, 0xeb, 0x51, 0xb8, 0x67, 0x97,
				0x40, 0x4e, 0x62, 0x10, 0x58, 0x39, 0x24, 0x3a, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
			Ticker{},
			io.EOF, // currentFunding
		},
		{
			[]byte{
				0x85, 0x00, 0xeb, 0x03, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7a, 0x3c, 0x03, 0x00,
				0x01, 0xc7, 0x59, 0xe5, 0x15, 0x83, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f,
				0x40, 0x60, 0xe5, 0xd0, 0x22, 0xdb, 0x59, 0x39, 0x40, 0x5e, 0xba, 0x49, 0x0c, 0x02, 0xfb, 0x3a,
				0x40, 0xa8, 0xc6, 0x4b, 0x37, 0x89, 0xa1, 0x25, 0x40, 0x1f, 0x85, 0xeb, 0x51, 0xb8, 0x67, 0x97,
				0x40, 0x4e, 0x62, 0x10, 0x58, 0x39, 0x24, 0x3a, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
				0xff,
			},
			Ticker{},
			io.EOF, // funding8h
		},
		{
			[]byte{
				0x85, 0x00, 0xeb, 0x03, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7a, 0x3c, 0x03, 0x00,
				0x01, 0xc7, 0x59, 0xe5, 0x15, 0x83, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f,
				0x40, 0x60, 0xe5, 0xd0, 0x22, 0xdb, 0x59, 0x39, 0x40, 0x5e, 0xba, 0x49, 0x0c, 0x02, 0xfb, 0x3a,
				0x40, 0xa8, 0xc6, 0x4b, 0x37, 0x89, 0xa1, 0x25, 0x40, 0x1f, 0x85, 0xeb, 0x51, 0xb8, 0x67, 0x97,
				0x40, 0x4e, 0x62, 0x10, 0x58, 0x39, 0x24, 0x3a, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
				0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
			},
			Ticker{},
			io.EOF, // estimatedDeliveryPrice
		},
		{
			[]byte{
				0x85, 0x00, 0xeb, 0x03, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7a, 0x3c, 0x03, 0x00,
				0x01, 0xc7, 0x59, 0xe5, 0x15, 0x83, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f,
				0x40, 0x60, 0xe5, 0xd0, 0x22, 0xdb, 0x59, 0x39, 0x40, 0x5e, 0xba, 0x49, 0x0c, 0x02, 0xfb, 0x3a,
				0x40, 0xa8, 0xc6, 0x4b, 0x37, 0x89, 0xa1, 0x25, 0x40, 0x1f, 0x85, 0xeb, 0x51, 0xb8, 0x67, 0x97,
				0x40, 0x4e, 0x62, 0x10, 0x58, 0x39, 0x24, 0x3a, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
				0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x85, 0xeb, 0x51, 0xb8, 0x67, 0x97,
				0x40,
			},
			Ticker{},
			io.EOF, // deliveryPrice
		},
		{
			[]byte{
				0x85, 0x00, 0xeb, 0x03, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7a, 0x3c, 0x03, 0x00,
				0x01, 0xc7, 0x59, 0xe5, 0x15, 0x83, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f,
				0x40, 0x60, 0xe5, 0xd0, 0x22, 0xdb, 0x59, 0x39, 0x40, 0x5e, 0xba, 0x49, 0x0c, 0x02, 0xfb, 0x3a,
				0x40, 0xa8, 0xc6, 0x4b, 0x37, 0x89, 0xa1, 0x25, 0x40, 0x1f, 0x85, 0xeb, 0x51, 0xb8, 0x67, 0x97,
				0x40, 0x4e, 0x62, 0x10, 0x58, 0x39, 0x24, 0x3a, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
				0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x85, 0xeb, 0x51, 0xb8, 0x67, 0x97,
				0x40, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
			},
			Ticker{},
			io.EOF, // settlementPrice
		},
		// some range check error cases
		{
			[]byte{
				0x85, 0x00, 0xeb, 0x03, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
				0x01, 0xc7, 0x59, 0xe5, 0x15, 0x83, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f,
				0x40, 0x60, 0xe5, 0xd0, 0x22, 0xdb, 0x59, 0x39, 0x40, 0x5e, 0xba, 0x49, 0x0c, 0x02, 0xfb, 0x3a,
				0x40, 0xa8, 0xc6, 0x4b, 0x37, 0x89, 0xa1, 0x25, 0x40, 0x1f, 0x85, 0xeb, 0x51, 0xb8, 0x67, 0x97,
				0x40, 0x4e, 0x62, 0x10, 0x58, 0x39, 0x24, 0x3a, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
				0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x85, 0xeb, 0x51, 0xb8, 0x67, 0x97,
				0x40, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3d, 0x47, 0xe4, 0xbb, 0x94, 0x6e, 0x37,
				0x40,
			},
			Ticker{},
			ErrRangeCheck, // instrumentId
		},
		{
			[]byte{
				0x85, 0x00, 0xeb, 0x03, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7a, 0x3c, 0x03, 0x00,
				0x09, 0xc7, 0x59, 0xe5, 0x15, 0x83, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f,
				0x40, 0x60, 0xe5, 0xd0, 0x22, 0xdb, 0x59, 0x39, 0x40, 0x5e, 0xba, 0x49, 0x0c, 0x02, 0xfb, 0x3a,
				0x40, 0xa8, 0xc6, 0x4b, 0x37, 0x89, 0xa1, 0x25, 0x40, 0x1f, 0x85, 0xeb, 0x51, 0xb8, 0x67, 0x97,
				0x40, 0x4e, 0x62, 0x10, 0x58, 0x39, 0x24, 0x3a, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
				0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x85, 0xeb, 0x51, 0xb8, 0x67, 0x97,
				0x40, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3d, 0x47, 0xe4, 0xbb, 0x94, 0x6e, 0x37,
				0x40,
			},
			Ticker{},
			ErrRangeCheck, // instrumentState
		},
		{
			[]byte{
				0x85, 0x00, 0xeb, 0x03, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7a, 0x3c, 0x03, 0x00,
				0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f,
				0x40, 0x60, 0xe5, 0xd0, 0x22, 0xdb, 0x59, 0x39, 0x40, 0x5e, 0xba, 0x49, 0x0c, 0x02, 0xfb, 0x3a,
				0x40, 0xa8, 0xc6, 0x4b, 0x37, 0x89, 0xa1, 0x25, 0x40, 0x1f, 0x85, 0xeb, 0x51, 0xb8, 0x67, 0x97,
				0x40, 0x4e, 0x62, 0x10, 0x58, 0x39, 0x24, 0x3a, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
				0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x85, 0xeb, 0x51, 0xb8, 0x67, 0x97,
				0x40, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3d, 0x47, 0xe4, 0xbb, 0x94, 0x6e, 0x37,
				0x40,
			},
			Ticker{},
			ErrRangeCheck, // timestamp
		},
	}

	marshaller := NewSbeGoMarshaller()
	tickerPtr := reflect.TypeOf(&Ticker{})

	for _, test := range tests {
		bufferData := bytes.NewBuffer(test.event)

		var header MessageHeader
		err := header.Decode(marshaller, bufferData)
		require.NoError(t, err)

		err = header.RangeCheck()
		require.NoError(t, err)

		var ticker Ticker

		err = ticker.Decode(marshaller, bufferData, header.BlockLength, true)
		require.ErrorIs(t, err, test.expectedError)

		if err == nil {
			common.ReplaceNaNValueOfStruct(&ticker, tickerPtr)
			common.ReplaceNaNValueOfStruct(&test.expectedOutput, tickerPtr)
			assert.Equal(t, ticker, test.expectedOutput)
		}
	}
}
