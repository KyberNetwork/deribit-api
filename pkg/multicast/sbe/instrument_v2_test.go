package sbe

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/KyberNetwork/deribit-api/pkg/common"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestDecodeInstrumentV2(t *testing.T) {
	eth8bytes := [8]byte{}
	btc8bytes := [8]byte{}
	usd8bytes := [8]byte{}
	copy(eth8bytes[:], "ETH")
	copy(btc8bytes[:], "BTC")
	copy(usd8bytes[:], "USD")

	tests := []struct {
		event          []byte
		expectedOutput InstrumentV2
		expectedError  error
	}{
		{
			event: []byte{
				0x8b, 0x00, 0xf2, 0x03, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00, 0x01,
				0x00, 0x96, 0x37, 0x03, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01,
				0x00, 0x42, 0x54, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x53,
				0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x53, 0x44, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x42, 0x54, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x55, 0x53, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x98, 0x6d, 0xf7,
				0x37, 0x65, 0x01, 0x00, 0x00, 0x00, 0x54, 0x04, 0xdc, 0x8f, 0x1d,
				0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0,
				0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xa9,
				0xf1, 0xd2, 0x4d, 0x62, 0x40, 0x3f, 0xfc, 0xa9, 0xf1, 0xd2, 0x4d,
				0x62, 0x30, 0x3f, 0xb8, 0x1e, 0x85, 0xeb, 0x51, 0xb8, 0x7e, 0x3f,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x40, 0x10, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x42, 0x54, 0x43, 0x2d, 0x50,
				0x45, 0x52, 0x50, 0x45, 0x54, 0x55, 0x41, 0x4c,
			},
			expectedOutput: InstrumentV2{
				InstrumentId:             210838,
				InstrumentState:          InstrumentState.Open,
				Kind:                     InstrumentKind.Future,
				InstrumentType:           InstrumentType.Reversed,
				OptionType:               OptionType.NotApplicable,
				SettlementPeriod:         Period.Perpetual,
				SettlementPeriodCount:    1,
				BaseCurrency:             btc8bytes,
				QuoteCurrency:            usd8bytes,
				CounterCurrency:          usd8bytes,
				SettlementCurrency:       btc8bytes,
				SizeCurrency:             usd8bytes,
				CreationTimestampMs:      1534242287000,
				ExpirationTimestampMs:    32503708800000,
				StrikePrice:              0,
				ContractSize:             10,
				MinTradeAmount:           10,
				TickSize:                 0.5,
				MakerCommission:          0,
				TakerCommission:          0.0005,
				BlockTradeCommission:     0.00025,
				MaxLiquidationCommission: 0.0075,
				MaxLeverage:              50,
				TickStepsList:            nil,
				InstrumentName:           []uint8("BTC-PERPETUAL"),
			},
		},
	}

	marshaller := NewSbeGoMarshaller()
	insPtr := reflect.TypeOf(&InstrumentV2{})

	for _, test := range tests {
		bufferData := bytes.NewBuffer(test.event)

		var header MessageHeader
		err := header.Decode(marshaller, bufferData)
		require.NoError(t, err)

		err = header.RangeCheck()
		require.NoError(t, err)

		var ins InstrumentV2
		err = ins.Decode(marshaller, bufferData, header.BlockLength, true)
		require.ErrorIs(t, err, test.expectedError)

		if err == nil {
			common.ReplaceNaNValueOfStruct(&ins, insPtr)
			common.ReplaceNaNValueOfStruct(&test.expectedOutput, insPtr)
			assert.Equal(t, ins, test.expectedOutput)
		}
	}
}
