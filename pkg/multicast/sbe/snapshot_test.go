package sbe

import (
	"bytes"
	"io"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestDecodeSnapshot(t *testing.T) {
	tests := []struct {
		event          []byte
		expectedOutput Snapshot
		expectedError  error
	}{
		{
			[]byte{
				0x16, 0x00, 0xec, 0x03, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, 0x37, 0x03, 0x00,
				0x60, 0xa5, 0x30, 0x16, 0x83, 0x01, 0x00, 0x00, 0x0a, 0x60, 0x88, 0xa0, 0x06, 0x00, 0x00, 0x00,
				0x01, 0x01, 0x11, 0x00, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcd, 0xcc, 0xcc, 0xcc, 0x4c,
				0x0f, 0xa5, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x4f, 0xf2, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x12, 0xa5, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x40, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x18, 0xa5, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x84, 0x2e, 0x41, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x7c, 0xa5, 0x40, 0x00, 0x00, 0x00, 0x00, 0x68, 0xb2, 0x0e, 0x41, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x9e, 0xa5, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x40, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0xb8, 0xa5, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0xc3, 0x40,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xa5, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x84, 0x2e,
				0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xee, 0xa5, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x08, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8e, 0xa6, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x08, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0xa6, 0x40, 0x00, 0x00, 0x00, 0x00,
				0x80, 0x84, 0x2e, 0x41, 0x00, 0x33, 0x33, 0x33, 0x33, 0xb3, 0xe5, 0xa6, 0x40, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x40, 0x7f, 0x40, 0x00, 0x66, 0x66, 0x66, 0x66, 0xe6, 0xe5, 0xa6, 0x40, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x8a, 0xa3, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2e, 0xa7, 0x40, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x40, 0x00, 0x33, 0x33, 0x33, 0x33, 0x33, 0x49, 0xa7, 0x40,
				0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xca, 0x40, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x60, 0xa7,
				0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8e, 0x40, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x68,
				0xa7, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6a, 0xe8, 0x40, 0x00, 0xcd, 0xcc, 0xcc, 0xcc, 0xcc,
				0x68, 0xa7, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6a, 0xe8, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x70, 0xa7, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x84, 0x2e, 0x41, 0x00, 0xcd, 0xcc, 0xcc,
				0xcc, 0xcc, 0x7a, 0xa7, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6a, 0xe8, 0x40, 0x00, 0x9a, 0x99,
				0x99, 0x99, 0x99, 0x7b, 0xa7, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6a, 0xe8, 0x40, 0x00, 0x9a,
				0x99, 0x99, 0x99, 0x19, 0x7c, 0xa7, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x89, 0x40, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0xe8, 0xa7, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0xf8, 0x40,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf6, 0xa7, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14,
				0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x92, 0xa8, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88,
				0xc3, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0xa8, 0x40, 0x00, 0x00, 0x00, 0x00, 0xc0,
				0xe2, 0xf7, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0xa8, 0x40, 0x00, 0x00, 0x00, 0x00,
				0x80, 0xea, 0xf7, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0xa8, 0x40, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x88, 0xc3, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0xa9, 0x40, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x88, 0xc3, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xae, 0xa9, 0x40, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84, 0xab, 0x40,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xee, 0xab,
				0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0xc3, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34,
				0xac, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0xc3, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x48, 0xac, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0xc3, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x84, 0xac, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbd, 0x0f, 0x41, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x10, 0xad, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0xc3, 0x40, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x24, 0xad, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0xc3, 0x40, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x38, 0xad, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0xc3, 0x40, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0xad, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0xc3, 0x40,
				0x00, 0x66, 0x66, 0x66, 0x66, 0xe6, 0x50, 0xad, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24,
				0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xad, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88,
				0xc3, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0xad, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x88, 0xc3, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe2, 0xad, 0x40, 0x00, 0x00, 0x00, 0x00,
				0x80, 0x84, 0x0e, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0xae, 0x40, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x88, 0xd3, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0xae, 0x40, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x88, 0xc3, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0xae, 0x40, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x88, 0xc3, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0xae, 0x40,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0xc3, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd6, 0xae,
				0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa4,
				0xaf, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x84, 0x0e, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x23, 0xb1, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0xb0, 0x40, 0x00, 0x9a, 0x99, 0x99, 0x99,
				0xd9, 0xb5, 0xb1, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0xae, 0x40, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0xc6, 0xb1, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x4f, 0x12, 0x41, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x80, 0xd4, 0xb1, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0xa9, 0x40, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0xeb, 0xb1, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0xb0, 0x40, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0xb3, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x94, 0x40,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0xb4, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6a, 0xe8,
				0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x82, 0xb4, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x39, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xb5, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x6a, 0xf8, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xad, 0xb5, 0x40, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x8a, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0xb6, 0x40, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x17, 0xf1, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb1, 0xb8, 0x40, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x82, 0xc6, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5c, 0xc1, 0x40, 0x00,
				0x00, 0x00, 0x00, 0x00, 0xe0, 0x75, 0x40,
			},
			Snapshot{
				InstrumentId:   210760,
				TimestampMs:    1662524630368,
				ChangeId:       28463095818,
				IsBookComplete: YesNo.Yes,
				IsLastInBook:   YesNo.Yes,
				LevelsList: []SnapshotLevelsList{
					{
						Side:   BookSide.Ask,
						Price:  2695.65,
						Amount: 75000,
					},
					{
						Side:   BookSide.Ask,
						Price:  2697,
						Amount: 3,
					},
					{
						Side:   BookSide.Ask,
						Price:  2700,
						Amount: 1000000,
					},
					{
						Side:   BookSide.Ask,
						Price:  2750,
						Amount: 251469,
					},
					{
						Side:   BookSide.Ask,
						Price:  2767,
						Amount: 3,
					},
					{
						Side:   BookSide.Ask,
						Price:  2780,
						Amount: 10000,
					},
					{
						Side:   BookSide.Ask,
						Price:  2800,
						Amount: 1000000,
					},
					{
						Side:   BookSide.Ask,
						Price:  2807,
						Amount: 3,
					},
					{
						Side:   BookSide.Ask,
						Price:  2887,
						Amount: 3,
					},
					{
						Side:   BookSide.Ask,
						Price:  2900,
						Amount: 1000000,
					},
					{
						Side:   BookSide.Ask,
						Price:  2930.85,
						Amount: 500,
					},
					{
						Side:   BookSide.Ask,
						Price:  2930.95,
						Amount: 2501,
					},
					{
						Side:   BookSide.Ask,
						Price:  2967,
						Amount: 3,
					},
					{
						Side:   BookSide.Ask,
						Price:  2980.6,
						Amount: 13816,
					},
					{
						Side:   BookSide.Ask,
						Price:  2992.2,
						Amount: 960,
					},
					{
						Side:   BookSide.Ask,
						Price:  2996.2,
						Amount: 50000,
					},
					{
						Side:   BookSide.Ask,
						Price:  2996.4,
						Amount: 50000,
					},
					{
						Side:   BookSide.Ask,
						Price:  3000,
						Amount: 1000000,
					},
					{
						Side:   BookSide.Ask,
						Price:  3005.4,
						Amount: 50000,
					},
					{
						Side:   BookSide.Ask,
						Price:  3005.8,
						Amount: 50000,
					},
					{
						Side:   BookSide.Ask,
						Price:  3006.05,
						Amount: 810,
					},
					{
						Side:   BookSide.Ask,
						Price:  3060,
						Amount: 98832,
					},
					{
						Side:   BookSide.Ask,
						Price:  3067,
						Amount: 5,
					},
					{
						Side:   BookSide.Ask,
						Price:  3145,
						Amount: 10000,
					},
					{
						Side:   BookSide.Ask,
						Price:  3156,
						Amount: 97836,
					},
					{
						Side:   BookSide.Ask,
						Price:  3160,
						Amount: 97960,
					},
					{
						Side:   BookSide.Ask,
						Price:  3178,
						Amount: 10000,
					},
					{
						Side:   BookSide.Ask,
						Price:  3280,
						Amount: 10000,
					},
					{
						Side:   BookSide.Ask,
						Price:  3287,
						Amount: 100,
					},
					{
						Side:   BookSide.Ask,
						Price:  3522,
						Amount: 10,
					},
					{
						Side:   BookSide.Ask,
						Price:  3575,
						Amount: 10000,
					},
					{
						Side:   BookSide.Ask,
						Price:  3610,
						Amount: 10000,
					},
					{
						Side:   BookSide.Ask,
						Price:  3620,
						Amount: 10000,
					},
					{
						Side:   BookSide.Ask,
						Price:  3650,
						Amount: 260000,
					},
					{
						Side:   BookSide.Ask,
						Price:  3720,
						Amount: 10000,
					},
					{
						Side:   BookSide.Ask,
						Price:  3730,
						Amount: 10000,
					},
					{
						Side:   BookSide.Ask,
						Price:  3740,
						Amount: 10000,
					},
					{
						Side:   BookSide.Ask,
						Price:  3750,
						Amount: 10000,
					},
					{
						Side:   BookSide.Ask,
						Price:  3752.45,
						Amount: 10,
					},
					{
						Side:   BookSide.Ask,
						Price:  3760,
						Amount: 10000,
					},
					{
						Side:   BookSide.Ask,
						Price:  3770,
						Amount: 10000,
					},
					{
						Side:   BookSide.Ask,
						Price:  3825,
						Amount: 250000,
					},
					{
						Side:   BookSide.Ask,
						Price:  3850,
						Amount: 20000,
					},
					{
						Side:   BookSide.Ask,
						Price:  3860,
						Amount: 10000,
					},
					{
						Side:   BookSide.Ask,
						Price:  3870,
						Amount: 10000,
					},
					{
						Side:   BookSide.Ask,
						Price:  3880,
						Amount: 10000,
					},
					{
						Side:   BookSide.Ask,
						Price:  3947,
						Amount: 1,
					},
					{
						Side:   BookSide.Ask,
						Price:  4050,
						Amount: 250000,
					},
					{
						Side:   BookSide.Ask,
						Price:  4387,
						Amount: 4135,
					},
					{
						Side:   BookSide.Ask,
						Price:  4533.85,
						Amount: 3890,
					},
					{
						Side:   BookSide.Ask,
						Price:  4550,
						Amount: 300000,
					},
					{
						Side:   BookSide.Ask,
						Price:  4564.5,
						Amount: 3280,
					},
					{
						Side:   BookSide.Ask,
						Price:  4587,
						Amount: 4135,
					},
					{
						Side:   BookSide.Ask,
						Price:  5000,
						Amount: 1300,
					},
					{
						Side:   BookSide.Ask,
						Price:  5200,
						Amount: 50000,
					},
					{
						Side:   BookSide.Ask,
						Price:  5250,
						Amount: 25,
					},
					{
						Side:   BookSide.Ask,
						Price:  5400,
						Amount: 100000,
					},
					{
						Side:   BookSide.Ask,
						Price:  5549,
						Amount: 832,
					},
					{
						Side:   BookSide.Ask,
						Price:  5800,
						Amount: 70000,
					},
					{
						Side:   BookSide.Ask,
						Price:  6321,
						Amount: 11524,
					},
					{
						Side:   BookSide.Ask,
						Price:  8888,
						Amount: 350,
					},
				},
			},
			nil,
		},
		{
			[]byte{
				0x16, 0x00, 0xec, 0x03, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x5d, 0x82, 0x03, 0x00,
				0x93, 0x40, 0x14, 0x16, 0x83, 0x01, 0x00, 0x00, 0xbb, 0x42, 0xff, 0x82, 0x0b, 0x00, 0x00, 0x00,
				0x01, 0x01, 0x11, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xa9, 0xf1, 0xd2, 0x4d,
				0x62, 0x60, 0x3f, 0x33, 0x33, 0x33, 0x33, 0x33, 0xb3, 0x52, 0x40, 0x01, 0xfc, 0xa9, 0xf1, 0xd2,
				0x4d, 0x62, 0x50, 0x3f, 0x66, 0x66, 0x66, 0x66, 0x66, 0xa6, 0x51, 0x40, 0x00, 0xfa, 0x7e, 0x6a,
				0xbc, 0x74, 0x93, 0x68, 0x3f, 0x9a, 0x99, 0x99, 0x99, 0x99, 0x99, 0xb9, 0x3f, 0x00, 0x79, 0xe9,
				0x26, 0x31, 0x08, 0xac, 0x6c, 0x3f, 0xcd, 0xcc, 0xcc, 0xcc, 0xcc, 0x8c, 0x42, 0x40, 0x00, 0xfa,
				0x7e, 0x6a, 0xbc, 0x74, 0x93, 0x78, 0x3f, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0xd3, 0x3f,
			},
			Snapshot{
				InstrumentId:   229981,
				TimestampMs:    1662522769555,
				ChangeId:       49442407099,
				IsBookComplete: YesNo.Yes,
				IsLastInBook:   YesNo.Yes,
				LevelsList: []SnapshotLevelsList{
					{
						Side:   BookSide.Ask,
						Price:  0.002,
						Amount: 74.8,
					},
					{
						Side:   BookSide.Bid,
						Price:  0.001,
						Amount: 70.6,
					},
					{
						Side:   BookSide.Ask,
						Price:  0.003,
						Amount: 0.1,
					},
					{
						Side:   BookSide.Ask,
						Price:  0.0035,
						Amount: 37.1,
					},
					{
						Side:   BookSide.Ask,
						Price:  0.006,
						Amount: 0.3,
					},
				},
			},
			nil,
		},

		{
			[]byte{
				0x16, 0x00, 0xec, 0x03, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, 0x37,
			},
			Snapshot{},
			io.ErrUnexpectedEOF,
		},
		{
			[]byte{
				0x16, 0x00, 0xec, 0x03, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x5d, 0x82, 0x03, 0x00,
				0x93, 0x40, 0x14, 0x16, 0x83, 0x01, 0x00, 0x00, 0xbb, 0x42, 0xff, 0x82, 0x0b, 0x00, 0x00, 0x00,
				0x01, 0x01, 0x11, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0xfc, 0xa9, 0xf1, 0xd2, 0x4d,
				0x62, 0x60, 0x3f, 0x33, 0x33, 0x33, 0x33, 0x33, 0xb3, 0x52, 0x40, 0x01, 0xfc, 0xa9, 0xf1, 0xd2,
				0x4d, 0x62, 0x50, 0x3f, 0x66, 0x66, 0x66, 0x66, 0x66, 0xa6, 0x51, 0x40, 0x00, 0xfa, 0x7e, 0x6a,
				0xbc, 0x74, 0x93, 0x68, 0x3f, 0x9a, 0x99, 0x99, 0x99, 0x99, 0x99, 0xb9, 0x3f, 0x00, 0x79, 0xe9,
				0x26, 0x31, 0x08, 0xac, 0x6c, 0x3f, 0xcd, 0xcc, 0xcc, 0xcc, 0xcc, 0x8c, 0x42, 0x40, 0x00, 0xfa,
				0x7e, 0x6a, 0xbc, 0x74, 0x93, 0x78, 0x3f, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0xd3, 0x3f,
			},
			Snapshot{},
			ErrRangeCheck,
		},
	}

	marshaller := NewSbeGoMarshaller()

	for _, test := range tests {
		bufferData := bytes.NewBuffer(test.event)

		var header MessageHeader
		err := header.Decode(marshaller, bufferData)
		require.NoError(t, err)

		err = header.RangeCheck()
		require.NoError(t, err)

		var snap Snapshot
		err = snap.Decode(marshaller, bufferData, header.BlockLength, true)
		require.ErrorIs(t, err, test.expectedError)

		if err == nil {
			assert.Equal(t, snap, test.expectedOutput)
		}
	}
}
